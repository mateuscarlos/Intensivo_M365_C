import type { Lesson } from "../types/content";

const lessonFiles = import.meta.glob("../content/lessons/*.md", {
  eager: true,
  as: "raw"
}) as Record<string, string>;

type LessonMeta = {
  level: Lesson["level"];
  duration: string;
  topics: string[];
  summary?: string;
};

const lessonMeta: Record<string, LessonMeta> = {
  Aula01_M365: {
    level: "Iniciante",
    duration: "45 min",
    topics: ["Fundamentos", "VariÃ¡veis", "Fluxo"],
    summary: "Fundamentos do C#, variÃ¡veis, operadores e controle de fluxo com pensamento algorÃ­tmico."
  },
  Aula02_M365: {
    level: "Iniciante",
    duration: "50 min",
    topics: ["Arrays", "Listas", "Complexidade"],
    summary: "DiferenÃ§as entre arrays e listas, processamento de coleÃ§Ãµes e anÃ¡lise Big-O."
  },
  Aula03_M365: {
    level: "Iniciante",
    duration: "45 min",
    topics: ["Strings", "DicionÃ¡rios", "Mapeamentos"],
    summary: "ManipulaÃ§Ã£o de strings, uso de StringBuilder e contagem com dicionÃ¡rios."
  },
  Aula04_M365: {
    level: "IntermediÃ¡rio",
    duration: "50 min",
    topics: ["Two Pointers", "Sliding Window", "Substrings"],
    summary: "ResoluÃ§Ã£o de problemas com dois ponteiros e janelas deslizantes para subarrays eficientes."
  },
  Aula05_M365: {
    level: "IntermediÃ¡rio",
    duration: "45 min",
    topics: ["Pilhas", "Filas", "ExpressÃµes"],
    summary: "AplicaÃ§Ãµes de pilhas e filas em validaÃ§Ã£o de expressÃµes e simulaÃ§Ãµes."
  },
  Aula06_M365: {
    level: "IntermediÃ¡rio",
    duration: "55 min",
    topics: ["Grafos", "DFS", "BFS"],
    summary: "RepresentaÃ§Ã£o de grafos, busca em profundidade e largura com casos prÃ¡ticos."
  },
  Aula07_M365: {
    level: "IntermediÃ¡rio",
    duration: "55 min",
    topics: ["Grafos", "Topological Sort", "BipartiÃ§Ã£o"],
    summary: "OrdenaÃ§Ã£o topolÃ³gica, detecÃ§Ã£o de ciclos e verificaÃ§Ã£o de bipartiÃ§Ã£o em grafos."
  },
  Aula08_M365: {
    level: "IntermediÃ¡rio",
    duration: "50 min",
    topics: ["Heaps", "Greedy", "Prioridades"],
    summary: "Estruturas de heap e estratÃ©gias gananciosas para alocaÃ§Ã£o de recursos."
  },
  Aula09_M365: {
    level: "AvanÃ§ado",
    duration: "55 min",
    topics: ["ProgramaÃ§Ã£o DinÃ¢mica", "Subproblemas"],
    summary: "IntroduÃ§Ã£o Ã  programaÃ§Ã£o dinÃ¢mica com memorizaÃ§Ã£o e exemplos clÃ¡ssicos."
  },
  Aula10_M365: {
    level: "AvanÃ§ado",
    duration: "60 min",
    topics: ["ProgramaÃ§Ã£o DinÃ¢mica", "TabulaÃ§Ã£o"],
    summary: "DP em grade, coin change e abordagem bottom-up para otimizaÃ§Ã£o."
  },
  Aula11_M365: {
    level: "IntermediÃ¡rio",
    duration: "50 min",
    topics: ["SQL", "DepuraÃ§Ã£o", "Tratamento de Erros"],
    summary: "Consultas SQL, funÃ§Ãµes de janela e estratÃ©gias de debugging em C#."
  },
  Aula12_M365: {
    level: "AvanÃ§ado",
    duration: "70 min",
    topics: ["DevOps", "ResiliÃªncia", "Simulado"],
    summary: "Boas prÃ¡ticas de DevOps, resiliÃªncia e simulado final multi-disciplinar."
  }
};

function extractTitle(content: string): string {
  const match = content.match(/^#\s+(.*)$/m);
  return match ? match[1].trim() : "LiÃ§Ã£o sem tÃ­tulo";
}

function extractObjectives(content: string): string[] {
  const match = content.match(/##\s+ðŸŽ¯[^\n]*\n([\s\S]*?)(?:\n-{3,}|^##\s+)/m);
  if (!match) {
    return [];
  }

  return match[1]
    .split("\n")
    .map((line) => line.trim().replace(/^[-*]\s*/, ""))
    .filter((line) => line.length > 0);
}

function normaliseId(filename: string): { id: string; order: number } {
  const orderMatch = filename.match(/(\d{2})/);
  const order = orderMatch ? Number.parseInt(orderMatch[1], 10) : 0;
  const id = filename
    .replace(/\.md$/i, "")
    .toLowerCase()
    .replace(/[^a-z0-9]+/g, "-")
    .replace(/(^-|-$)/g, "");

  return { id, order };
}

export const lessons: Lesson[] = Object.entries(lessonFiles)
  .map(([path, rawContent]) => {
    const fileName = path.split("/").pop() ?? "lesson";
    const key = fileName.replace(/\.md$/i, "");
    const { id, order } = normaliseId(fileName);
    const title = extractTitle(rawContent);
    const objectives = extractObjectives(rawContent);
    const meta = lessonMeta[key] ?? {
      level: "IntermediÃ¡rio",
      duration: "45 min",
      topics: []
    };

    const summary = meta.summary ?? objectives[0] ?? "Veja o conteÃºdo completo da liÃ§Ã£o.";

    return {
      id,
      order,
      title,
      level: meta.level,
      duration: meta.duration,
      summary,
      objectives,
      topics: meta.topics,
      content: rawContent.trim()
    } satisfies Lesson;
  })
  .sort((a, b) => a.order - b.order);
